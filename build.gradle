apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'idea'


defaultTasks 'clean', 'build', 'publish'
group = 'coyote'
version = '0.2'

ext {
	title = 'Coyote Batch Framework'
	provider = 'Coyote Codeworks'
	mainClass = 'coyote.batch.Loader'
}
jar {
    manifest {
		attributes  'Implementation-Title' : "$title",
		'Provider' : "$provider",
		'Main-Class' : "$mainClass",
		'Implementation-Version' : version
	}
}
task fatJar(type: Jar) {
	manifest {
		attributes  'Implementation-Title' : "$title",
		'Provider' : "$provider",
		'Main-Class' : "$mainClass",
		'Implementation-Version' : version
	}
	baseName = project.name + '-all'
	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } 
	}{
		exclude "META-INF/*.RSA"
	}
	with jar
}

repositories {

	mavenLocal()

	mavenCentral()
		
}


ext {
	slf4jVersion = '1.7.5'
	junitVersion = '4.11'
	dataFrameVersion = '0.3'
	logbackVersion = '0.9.30'
	h2Version = '1.3.173'
}
dependencies {

	// Logging
	compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
	compile "ch.qos.logback:logback-classic:$logbackVersion"
	compile "ch.qos.logback:logback-core:$logbackVersion"
	
	// Abstract Data Type
	compile "coyote:DataFrame:$dataFrameVersion"

	// UnitTesting
	testCompile "junit:junit:$junitVersion"	
	// Database for testing JDBC
	testCompile "com.h2database:h2:$h2Version"

}



// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}


task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}


// add javadoc/source jar tasks as artifacts
artifacts {
	archives sourcesJar, javadocJar
}


publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			artifact sourcesJar {
				classifier "sources"
			}

			artifact javadocJar {
				classifier "javadoc"
			}
		}
	}
	
	repositories {
		mavenLocal()
	}
}


task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}
